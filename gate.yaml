substitutions:
  name: "centurion-d5-evo"
  device_name: "centurion_d5_evo"
  friendly_name: "Centurion D5 Evo"
  comment: "Control your Centurion D5 Evo gate motor remotely."
  relay_1_pin: GPIO32
  relay_2_pin: GPIO33
  relay_3_pin: GPIO25
  relay_4_pin: GPIO26
  led_pin: GPIO23

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  comment: ${comment}

esp32:
  board: nodemcu-32s
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

<<: !include common.yaml

binary_sensor:
  - platform: gpio
    pin: ${led_pin}
    id: status_led
    name: "Status LED"
    entity_category: diagnostic
    icon: mdi:led-outline
    publish_initial_state: true
    filters:
        delayed_on_off: 100ms
    on_multi_click:
      - timing: # Closed
          - OFF for at least 2000ms
        then:
          - logger.log: "Closed"
          - text_sensor.template.publish:
              id: status
              state: "Closed"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Open
          - ON for at least 2000ms
        then:
          - logger.log: "Open"
          - text_sensor.template.publish:
              id: status
              state: "Open"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_IDLE;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Closing
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        - ON for 100ms to 200ms
        - OFF for 100ms to 200ms
        then:
          - logger.log: "Closing"
          - text_sensor.template.publish:
              id: status
              state: "Closing"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_CLOSING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Opening
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
          - ON for 200ms to 400ms
          - OFF for 200ms to 400ms
        then:
          - logger.log: "Opening"
          - text_sensor.template.publish:
              id: status
              state: "Opening"
          - lambda: |-
              id(gate).current_operation = CoverOperation::COVER_OPERATION_OPENING;
              id(gate).publish_state();
        invalid_cooldown: 100ms

      - timing: # Pillar light override
          - ON for 200ms to 300ms
          - OFF for 1700ms to 1800ms
        then:
          - logger.log: "Pillar light override"
          - text_sensor.template.publish:
              id: status
              state: "Pillar light override"
        invalid_cooldown: 100ms

      - timing: # No Mains
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 1200ms to 1400ms
        then:
          - logger.log: "No Mains"
          - text_sensor.template.publish:
              id: status
              state: "No Mains"
        invalid_cooldown: 100ms

      - timing: # Battery Low
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 200ms to 300ms
          - ON for 200ms to 300ms
          - OFF for 500ms to 1000ms
        then:
          - logger.log: "Low Battery"
          - text_sensor.template.publish:
              id: status
              state: "Low Battery"
        invalid_cooldown: 100ms

output:
  - platform: gpio
    pin: ${relay_1_pin}
    id: relay_1
    inverted: true
  - platform: gpio
    pin: ${relay_2_pin}
    id: relay_2
    inverted: true
  - platform: gpio
    pin: ${relay_3_pin}
    id: relay_3
    inverted: true

button:
  - platform: output
    output: relay_1
    id: button_1
    duration: 1000ms
    name: "Open / Auto Close"
    icon: "mdi:gate"
  - platform: output
    output: relay_1
    id: button_2
    duration: 2900ms # Autoclose override time
    name: "Open / Manual Close"
    icon: "mdi:gate"
  - platform: output
    output: relay_2
    id: button_3
    duration: 1000ms
    name: "Pedestrian"
    icon: "mdi:walk"
  - platform: output
    output: relay_3
    id: button_4
    duration: 2900ms # Autoclose override time
    name: "Light"
    icon: "mdi:light-flood-down"

switch:
  - platform: gpio
    pin:
      number: ${relay_4_pin}
    id: relay_4
    inverted: true
    icon: "mdi:lock"
    name: "Lock"
  - platform: restart
    name: ${friendly_name} ESP32 Restart
    id: ${device_name}_esp32_restart

cover:
  - platform: template
    name: "Gate"
    device_class: gate
    id: gate
    lambda: |-
      if (id(status).state == "Open") {
        return COVER_OPEN;
      } else if (id(status).state == "Closed") {
        return COVER_CLOSED;
      } else {
        return {};
      }
    open_action:
      - button.press: button_1
    close_action:
      - button.press: button_1
    stop_action:
      - button.press: button_1
    optimistic: false

# # Sensors for ESP version and WIFI information
text_sensor:
  - platform: template
    icon: mdi:information-outline
    id: status
    name: "Status"
  # ESPHome version
  - platform: version
    hide_timestamp: true
    name: 'ESPHome Version'

sensor:
  - platform: uptime
    name: ${friendly_name} Uptime Sec
    id: ${device_name}_uptime_sec
